1. Package.json is configuration for npm
2. ~ is used to match the most recent patch version. Tilde ~ notation freezes the major version and minor version. As we know patch updates are bug fixes that’s why we can say ~ notation allows us to automatically accept bug fixes.

Example: The ~1.2.0 will update all the future patch updates. We have to write just ~1.2.0 and all the next patch update dependencies. For example, 1.2.1, 1.2.2, 1.2.5……………1.2.x.
   Caret (^) notation: It is used for automatically updating the minor updates along with patch updates. 

 Example: The ^1.2.4 will update all the future Minor and patch updates, for example, ^1.2.4 will automatically change the dependency to 1.x.x if any update occurs. 

It records the exact version of every installed dependency, including its sub-dependencies and their versions. The purpose of package-lock. json is to ensure that the same dependencies are installed consistently across different environments, such as development and production environments.
-- Integrity inside package-lock.json makes sure that whatever is in the local machine during development is the same one that’s deployed.

3. npx means executing a package.

4. While making a production build using parcel we have to remove main key from package.json because it conflicts with parcel.

5. React app is fast because of bundlers, Tree Shaking and compressions done by parcel

6. Transitive Dependencies are dependencies that are required by the packages in package.json

7. npm start = npm run start

8. JSX is different than HTML, its not html inside javascript. It is a HTML like syntax

9. Babel transpiles the jsx code to react code for us.

10. //JSX => Converted to React.createElement - JS Object => HTMLElement(render)

11. Attributes to JSX have to be Camel Case.

12.  Babel takes care of Cross Site Scripting when we insert code through {}


Lesson-3 code

import React from "react";
import ReactDOM from "react-dom/client";

// const heading = React.createElement("h1",{"id": "heading"},"Namaste React")

//JSX - HTML like syntax

//JSX => Converted to React.createElement - JS Object => HTMLElement(render)

//JSX Element
// const heading = <h1 id="heading">Namaste React using JSX</h1>;

//React Component
//Functional Components - Javascript function that returns JSX/React Element
const element = <span>React Element</span>;

//Component Compositions

const title = (
  <h1 className="head" tabIndex="5">
    Namaste React using JSX
  </h1>
);

//React Fragment - behaves like an empty tag. Its same as <></>
const HeadingComponent = () => {
  return (
    <>
      <div id="container">
        {title}
        {/* Babel takes care of Cross Site Scripting here */}
        {/* {Title()} Another cool way of writing jsx */}
        <h1 id="heading"> Namaste React Functional Component</h1>
      </div>
      <div id="container2"></div>
    </>
  );
};

const Title = () => {
  return (
    <h1 className="head" tabIndex="5">
      Namaste React using JSX
    </h1>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(HeadingComponent); Cannot render like this

root.render(<HeadingComponent />);

13. Config driven ui - Ui is driven by config

14. When there are components at same level they need to have unique ids for optimising render cycles.

15. Using index as keys is not recommended and bad practice

16. Whenever a state variable changes, React will re-render component

17. Reconciliation Algorithm - Also known as React Fiber.
    In React 16 a new Algorithm came
          O (res-container)         O
        / | \                 =>   /|
        O O  O (3 res cards)      O O (2 cards)
      Old Virtual DOM           New Virtual DOM
  Virtual DOM - is a representation of actual DOM (normal JS Object )

* React is fast because of Virtual Dom which is a representation of actual DOM. It uses a diffing algorithm to update the actual DOM.

18. Each and every service has its own job. This is called seperation of concern.

19. A shimmer UI is a version of the UI that doesn't contain actual content, but instead mimics the layout and shapes of the content that will eventually appear.
 It uses a gradient animation that creates a shimmering effect over the placeholders, giving the user a sense of motion and progress.

20. Whenever state variable updates, it re-renders the component.

21. React is fast because of virtual dom and the Reconciliation algorithm. The algorithm finds the difference between the Virtual DOM and the actual DOM
and efficiently updates only the parts that have changed. Thats why react is fast

22. Never create state variables inside conditional statements or loops or a function.

23. if no dependency array => useEffect is called on every render(default behaviour)
  if dependency array is empty [] => useEffect is called on initial render(just once)
  if dependency array is [btnNameReact] => useEffect is called everytime btnNameReact is updated

24. Server Side Routing a network call is made to the server and the server provides a html which is then rendered by the browser.
    Client Side Routing is when no network call is made and all components are already loaded onto the app.


25. In Set State for class components we pass only 1 value and the state object has multiple properties, then only the property/properties 
passed will be updated. Rest of the properties will be untouched.

25. Constructor is called -> render -> compnentDidMount is Called while instantiating a class 

26. React Optimises our app by batching renders of child component and commit phase as well.

/*
  - Parent Constructor
  - Parent Render

    - First Child Constructor
    - First Child Render

    - Second Child Constructor
    - Second Child Render

    <Dom Updated in Single Batch>

    - First Child ComponentDidMount
    - Second Child ComponentDidMount
  - Parent ComponentDidMount
*/

27. ComponentDidMount is not equivalent to useEffect. ComponentDidUnmount is use to clean
up setinterval/settimeout. Similarly from useEffect we can return a function, that function
will be called whenever the component is umnounted.

28. We do super(props) in constructor if we want to access the properties using this 
inside the constructor. It doesn't matter if we do super() or super(props) inside 
constructor if we want to use this outside the constructor.