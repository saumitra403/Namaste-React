1. Package.json is configuration for npm
2. ~ is used to match the most recent patch version. Tilde ~ notation freezes the major version and minor version. As we know patch updates are bug fixes that’s why we can say ~ notation allows us to automatically accept bug fixes.

Example: The ~1.2.0 will update all the future patch updates. We have to write just ~1.2.0 and all the next patch update dependencies. For example, 1.2.1, 1.2.2, 1.2.5……………1.2.x.
   Caret (^) notation: It is used for automatically updating the minor updates along with patch updates. 

 Example: The ^1.2.4 will update all the future Minor and patch updates, for example, ^1.2.4 will automatically change the dependency to 1.x.x if any update occurs. 

It records the exact version of every installed dependency, including its sub-dependencies and their versions. The purpose of package-lock. json is to ensure that the same dependencies are installed consistently across different environments, such as development and production environments.
-- Integrity inside package-lock.json makes sure that whatever is in the local machine during development is the same one that’s deployed.

3. npx means executing a package.

4. While making a production build using parcel we have to remove main key from package.json because it conflicts with parcel.

5. React app is fast because of bundlers, Tree Shaking and compressions done by parcel

6. Transitive Dependencies are dependencies that are required by the packages in package.json

7. npm start = npm run start

8. JSX is different than HTML, its not html inside javascript. It is a HTML like syntax

9. Babel transpiles the jsx code to react code for us.

10. //JSX => Converted to React.createElement - JS Object => HTMLElement(render)

11. Attributes to JSX have to be Camel Case.

12.  Babel takes care of Cross Site Scripting when we insert code through {}


Lesson-3 code

import React from "react";
import ReactDOM from "react-dom/client";

// const heading = React.createElement("h1",{"id": "heading"},"Namaste React")

//JSX - HTML like syntax

//JSX => Converted to React.createElement - JS Object => HTMLElement(render)

//JSX Element
// const heading = <h1 id="heading">Namaste React using JSX</h1>;

//React Component
//Functional Components - Javascript function that returns JSX/React Element
const element = <span>React Element</span>;

//Component Compositions

const title = (
  <h1 className="head" tabIndex="5">
    Namaste React using JSX
  </h1>
);

//React Fragment - behaves like an empty tag. Its same as <></>
const HeadingComponent = () => {
  return (
    <>
      <div id="container">
        {title}
        {/* Babel takes care of Cross Site Scripting here */}
        {/* {Title()} Another cool way of writing jsx */}
        <h1 id="heading"> Namaste React Functional Component</h1>
      </div>
      <div id="container2"></div>
    </>
  );
};

const Title = () => {
  return (
    <h1 className="head" tabIndex="5">
      Namaste React using JSX
    </h1>
  );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(HeadingComponent); Cannot render like this

root.render(<HeadingComponent />);
